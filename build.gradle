buildscript {
    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${elasticsearchVersion}"
    }
}

group = 'org.elasticsearch'
version = "$elasticsearchVersion"
description = 'elasticsearch-analysis-hanlp'

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'

// Configure Java toolchain
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Add repositories for dependency resolution
repositories {
    mavenCentral()
    maven { url "https://repo.maven.apache.org/maven2/" }
    // For ES dependencies
    maven { url "https://artifacts.elastic.co/maven/" }
}

esplugin {
    name 'analysis-hanlp'
    description 'HanLP Analyzer for ElasticSearch'
    classname 'org.elasticsearch.plugin.analysis.hanlp.AnalysisHanLPPlugin'
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

// Customize jar task
tasks.named('jar') {
    archiveBaseName = rootProject.name
}

// Customize assemble task to rename the created zip file
tasks.named('assemble') {
    doLast {
        File zipFile = file("build/distributions/analysis-hanlp-${elasticsearchVersion}.zip")
        if (zipFile.exists()) {
            zipFile.renameTo(file("build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"))
            ant.checksum file: "build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"
        }
    }
}

// Configure dependencies and resolution strategy
configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        force 'commons-codec:commons-codec:1.15'
        force 'commons-logging:commons-logging:1.2'
        force 'org.apache.httpcomponents:httpclient:4.5.13'
        force 'org.apache.httpcomponents:httpcore:4.4.14'
    }
}

dependencies {
    implementation 'com.hankcs:hanlp:portable-1.8.6'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.httpcomponents:httpcore:4.4.14'
}

// Safely configure tasks only if they exist
def configureTaskIfExists = { taskName, configurationClosure ->
    def task = tasks.findByName(taskName)
    if (task != null) {
        task.configure(configurationClosure)
    }
}

configureTaskIfExists('checkstyleMain') { task ->
    task.excludes = ['**/PorterStemmer.java']
}

configureTaskIfExists('forbiddenApisMain') { task ->
    task.excludes = [
            '**/AnalysisHanLPPlugin.class',
            '**/PorterStemmer.class',
            '**/RemoteDictConfig.class',
            '**/DictionaryFileCache.class',
            '**/ExtMonitor.class',
            '**/model/*.class',
            '**/CoreStopWordDictionary.class'
    ]
}

// Safe handling of plugin extensions
def configureEnabledIfExists = { extensionName, value ->
    def extension = project.extensions.findByName(extensionName)
    if (extension != null) {
        extension.enabled = value
    }
}

configureEnabledIfExists('forbiddenPatterns', false)
configureEnabledIfExists('licenseHeaders', false)
configureEnabledIfExists('dependencyLicenses', false)
configureEnabledIfExists('thirdPartyAudit', false)
configureEnabledIfExists('validateNebulaPom', false)
configureEnabledIfExists('loggerUsageCheck', false)
configureEnabledIfExists('testingConventions', false)

// Configure test tasks
tasks.withType(Test).configureEach {
    systemProperty 'tests.security.manager', 'false'
}

// Disable Javadoc tasks
tasks.withType(Javadoc).configureEach {
    enabled = false
}
